Description: >
  Reda Loukil / Udacity Nanodegree
  This template deploys load balancer and lunch configuration.

Parameters:
  # whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: UdacityProject

  EnvironmentMaintainer:
    Description: The project maintainer name
    Type: String
    Default: Reda Loukil

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer ( load balancer accepts incoming http request and emits http response)
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  
  WebAppLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          cd /var/www/html
          echo "<h1>it works! Udagram, Udacity</h1>" > index.html
          systemctl start apache2.service
      ImageId: ami-0b33356b362c56df5 # this AMI ID may not be available. Find a new base line Ubuntu image.
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
  
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-Private-subnets"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '2'
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  WebAppTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  WebAppLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-Public1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-Public2"
      SecurityGroups:
        - Ref: LBSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Web Balancer
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
        - Key: StudentName
          Value: !Ref EnvironmentMaintainer
  
  #Listener attached to load balancer
  Listener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLB
        Port: '80' 
        Protocol: HTTP 
  
  #Listner Rule of load balancer
  LBListenerRule:
      Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
      Properties:
        Actions: 
          - Type: forward
            TargetGroupArn: !Ref WebAppTargetGroup
        Conditions: 
          - Field: path-pattern
            Values: [/]
        ListenerArn: !Ref Listener
        Priority: 1 

  #Bastion host instance in public subnet 1
  BastionHost1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0b33356b362c56df5
      InstanceType: t2.micro
      BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId:
            Fn::ImportValue:
              !Sub ${EnvironmentName}-Public1
          GroupSet:
           - !Ref WebServerSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 1
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
        - Key: EnvironmentMaintainer
          Value: !Ref EnvironmentMaintainer

#Bastion host instance in public subnet 2
  BastionHost2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0b33356b362c56df5
      InstanceType: t2.micro
      BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId:
            Fn::ImportValue:
              !Sub ${EnvironmentName}-Public2
          GroupSet:
           - !Ref WebServerSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 2
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
        - Key: EnvironmentMaintainer
          Value: !Ref EnvironmentMaintainer